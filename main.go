package main

import (
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/joho/godotenv"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

var (
	movieList     []string
	waitingForAdd map[int64]bool = make(map[int64]bool)
	userChats     map[int64]bool = make(map[int64]bool) // –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	token := os.Getenv("TELEGRAM_TOKEN")
	if token == "" {
		log.Fatal("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	fmt.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω:", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates, err := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			handleMessage(bot, update.Message)
		} else if update.CallbackQuery != nil {
			handleCallback(bot, update.CallbackQuery)
		}
	}
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ (—á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
	userChats[chatID] = true

	if waitingForAdd[chatID] {
		movie := strings.TrimSpace(message.Text)
		if movie == "" {
			bot.Send(tgbotapi.NewMessage(chatID, "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
			return
		}

		movieList = append(movieList, movie)
		waitingForAdd[chatID] = false 

		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–§–∏–ª—å–º '%s' –¥–æ–±–∞–≤–ª–µ–Ω!", movie)))

		// –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
		notifyAllUsers(bot, fmt.Sprintf("üé¨ –ù–æ–≤—ã–π —Ñ–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω: *%s*", movie))

		sendMainMenu(bot, chatID)
		return
	}

	switch message.Text {
	case "/start":
		sendMainMenu(bot, chatID)
	default:
		bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ."))
		sendMainMenu(bot, chatID)
	}
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func sendMainMenu(bot *tgbotapi.BotAPI, chatID int64) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º", "add"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º", "remove"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ", "watched"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", "list"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", "refresh"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "üé¨ *–í–∞—à —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
func handleCallback(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	switch callback.Data {
	case "add":
		waitingForAdd[chatID] = true
		bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:"))

	case "remove":
		if len(movieList) == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç."))
			return
		}

		var rows [][]tgbotapi.InlineKeyboardButton
		for _, movie := range movieList {
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(movie, "del_"+movie),
			))
		}
		keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
		msg.ReplyMarkup = keyboard
		bot.Send(msg)

	case "watched":
		if len(movieList) == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç."))
			return
		}

		var rows [][]tgbotapi.InlineKeyboardButton
		for _, movie := range movieList {
			if !strings.Contains(movie, "‚úÖ") {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(movie, "watch_"+movie),
				))
			}
		}
		keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏:")
		msg.ReplyMarkup = keyboard
		bot.Send(msg)

	case "list":
		if len(movieList) == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç."))
		} else {
			bot.Send(tgbotapi.NewMessage(chatID, "–í–∞—à–∏ —Ñ–∏–ª—å–º—ã:\n"+strings.Join(movieList, "\n")))
		}

	case "refresh":
		sendMainMenu(bot, chatID)

	default:
		if strings.HasPrefix(callback.Data, "del_") {
			movie := strings.TrimPrefix(callback.Data, "del_")
			removeMovie(movie)
			bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–§–∏–ª—å–º '%s' —É–¥–∞–ª–µ–Ω!", movie)))
		} else if strings.HasPrefix(callback.Data, "watch_") {
			movie := strings.TrimPrefix(callback.Data, "watch_")
			markMovieWatched(movie)
			bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–§–∏–ª—å–º '%s' –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π ‚úÖ", movie)))
		}
	}

	sendMainMenu(bot, chatID)
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func notifyAllUsers(bot *tgbotapi.BotAPI, message string) {
	for chatID := range userChats {
		msg := tgbotapi.NewMessage(chatID, message)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
	}
}

// –£–¥–∞–ª—è–µ–º —Ñ–∏–ª—å–º
func removeMovie(movie string) {
	for i, m := range movieList {
		if m == movie {
			movieList = append(movieList[:i], movieList[i+1:]...)
			break
		}
	}
}

// –û—Ç–º–µ—á–∞–µ–º —Ñ–∏–ª—å–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º
func markMovieWatched(movie string) {
	for i, m := range movieList {
		if m == movie {
			movieList[i] = movie + " ‚úÖ"
			break
		}
	}
}
