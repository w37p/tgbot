package main

import (
	"fmt"
	"log"
	"os"
	"strings"
	"sync"

	"github.com/joho/godotenv"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

var (
	movieList     []string
	userChats     map[int64]bool = make(map[int64]bool)
	waitingForAdd map[int64]bool = make(map[int64]bool)
	mu            sync.Mutex
)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	token := os.Getenv("TELEGRAM_TOKEN")
	if token == "" {
		log.Fatal("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	fmt.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω:", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates, err := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			handleMessage(bot, update.Message)
		} else if update.CallbackQuery != nil {
			handleCallback(bot, update.CallbackQuery)
		}
	}
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID

	// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userChats[chatID] = true

	if waitingForAdd[chatID] {
		movie := strings.TrimSpace(message.Text)
		if movie == "" {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
			return
		}

		mu.Lock()
		movieList = append(movieList, movie)
		mu.Unlock()

		waitingForAdd[chatID] = false

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏–≤—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –§–∏–ª—å–º '%s' –¥–æ–±–∞–≤–ª–µ–Ω!", movie)))

		// –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		notifyAllUsers(bot, fmt.Sprintf("üé¨ *–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º:* _%s_", movie), chatID)
		return
	}

	if message.Text == "/start" {
		sendMainMenu(bot, chatID)
	}
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ /start)
func sendMainMenu(bot *tgbotapi.BotAPI, chatID int64) {
	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É /start –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
	replyKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("/start"),
		),
	)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º", "add"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º", "remove"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ", "watched"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", "list"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "üé¨ *–í–∞—à —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤:*")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = replyKeyboard // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É /start
	bot.Send(msg)

	menuMsg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	menuMsg.ReplyMarkup = keyboard
	bot.Send(menuMsg)
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
func handleCallback(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	switch callback.Data {
	case "add":
		waitingForAdd[chatID] = true
		bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:"))

	case "remove":
		if len(movieList) == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç."))
			return
		}

		var rows [][]tgbotapi.InlineKeyboardButton
		mu.Lock()
		for _, movie := range movieList {
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(movie, "del_"+movie),
			))
		}
		mu.Unlock()

		keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

		msg := tgbotapi.NewMessage(chatID, "üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
		msg.ReplyMarkup = keyboard
		bot.Send(msg)

	case "watched":
		if len(movieList) == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç."))
			return
		}

		var rows [][]tgbotapi.InlineKeyboardButton
		mu.Lock()
		for _, movie := range movieList {
			if !strings.Contains(movie, "‚úÖ") {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(movie, "watch_"+movie),
				))
			}
		}
		mu.Unlock()

		keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

		msg := tgbotapi.NewMessage(chatID, "üé¨ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏:")
		msg.ReplyMarkup = keyboard
		bot.Send(msg)

	case "list":
		if len(movieList) == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç."))
		} else {
			mu.Lock()
			movieText := "üìã *–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤:*\n" + strings.Join(movieList, "\n")
			mu.Unlock()
			msg := tgbotapi.NewMessage(chatID, movieText)
			msg.ParseMode = "Markdown"
			bot.Send(msg)
		}

	default:
		if strings.HasPrefix(callback.Data, "del_") {
			movie := strings.TrimPrefix(callback.Data, "del_")
			removeMovie(movie)
			bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("üóë –§–∏–ª—å–º '%s' —É–¥–∞–ª–µ–Ω!", movie)))
		} else if strings.HasPrefix(callback.Data, "watch_") {
			movie := strings.TrimPrefix(callback.Data, "watch_")
			markMovieWatched(movie)
			bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –§–∏–ª—å–º '%s' –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π!", movie)))
		}
	}
}

// üîπ –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∞–≤—Ç–æ—Ä–∞)
func notifyAllUsers(bot *tgbotapi.BotAPI, message string, excludeChatID int64) {
	mu.Lock()
	defer mu.Unlock()
	for chatID := range userChats {
		if chatID != excludeChatID { // –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
			msg := tgbotapi.NewMessage(chatID, message)
			msg.ParseMode = "Markdown"
			bot.Send(msg)
		}
	}
}

// –£–¥–∞–ª—è–µ–º —Ñ–∏–ª—å–º
func removeMovie(movie string) {
	mu.Lock()
	defer mu.Unlock()
	for i, m := range movieList {
		if m == movie {
			movieList = append(movieList[:i], movieList[i+1:]...)
			break
		}
	}
}

// –û—Ç–º–µ—á–∞–µ–º —Ñ–∏–ª—å–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º
func markMovieWatched(movie string) {
	mu.Lock()
	defer mu.Unlock()
	for i, m := range movieList {
		if m == movie {
			movieList[i] = movie + " ‚úÖ"
			break
		}
	}
}
